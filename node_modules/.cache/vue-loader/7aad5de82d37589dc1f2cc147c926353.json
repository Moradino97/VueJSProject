{"remainingRequest":"/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/momo/Bureau/FrontBack-Project-VUEJS/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/home/momo/Bureau/FrontBack-Project-VUEJS/src/App.vue","mtime":1610626606030},{"path":"/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/momo/Bureau/FrontBack-Project-VUEJS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}